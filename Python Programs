"""
Created on Sun Sep 25 12:51:59 2022
@author: Dileep and Siva Prasad

1.] Write a Python program to count the number of strings for which length is greater than 3
Sample List : ['SQL', 'Adi', 'Python', 'Chandu','Azeez']
"""

def cntstrlist(lst):
    cnt=0
    for le in lst:
        if len(le)>3:
            cnt=cnt+1
    print(cnt)
spllst=['SQL', 'Adi', 'Python', 'Chandu','Azeez']     
cntstrlist(spllst)


"""
2.] Write a Python program to count the number of strings where the string 
length is 2 or more and the first and last character are same from a given 
list of strings. 

Sample List : ['abc', 'xyz', 'aba', '1221','ab']
"""

def cntstrlist(lst):
    cnt=0
    for le in lst:
        if len(le)>2 and le[0]==le[-1]:
            cnt=cnt+1
    print(cnt)
spllst=['abc', 'xyz', 'aba', '1221','ab']   
cntstrlist(spllst)

"""
3.] WAP to find count of each element in a list ?
Output should be in a dictionary.
lst = [1,2,3,4,5,1,2,3,1,2]
o/p : {1:3, 2:3......}
"""

def listtodict(lst):
    dict={le:lst.count(le) for le in lst}
    print(dict)
lst1=[1,2,3,4,5,1,2,3,1,2]
listtodict(lst1)

"""
4.] WAP to print element in the odd indexes in a given list.
lst = [10,20,30,40,50,60,70,80,90,100]
o/p = [20,40,60,80,100]
"""
def oddidx(lst):
     print(lst[1::2])
lst1 = [10,20,30,40,50,60,70,80,90,100]
oddidx(lst1)

"""
5.] WAP to print element in a given list, for which the value is greater than 50
lst = [100,10,30,90,35, 65, 75, 80, 20, 40]
o/p = [100,90,75,80,65]
"""
def lstex(lst):
    res=[]
    for le in lst:
        if le>50:
            res.append(le)
    print(res)
lst1 = [100,10,30,90,35, 65, 75, 80, 20, 40]
lstex(lst1)

"""
7.] WAP to return smallest and largest element in the given list.
lst = [100,10,30,90,35, 65, 75, 80, 20, 40]
o/p = 10,100
"""
def lstex(lst):
    low=lst[0]
    hig=lst[0]
    for le in lst:
        if le>hig:
            hig=le
        if le<low:
            low=le
    print(low,",",hig)
lst1 = [100,10,30,90,35, 65, 75, 80, 20, 40]
lstex(lst1)

"""
def lstex(lst):
    low=lst[0]
    sl=lst[0]
    for le in lst:
        if le<low:
            sl=low
            low=le
        elif le<sl:
            sl=le
    print(sl)
lst1 = [100,10,30,90,35, 65, 75, 80, 20, 40]
lstex(lst1)

"""
9.] WAP to count no of element in a given list, for which the value is greater than 50 and less than 80
lst = [100,10,30,90,35, 65, 75, 80, 20, 40]
o/p = 2
"""
def lstex(lst):
    cnt=0
    for le in lst:
        if le>50 and le<80:
            cnt=cnt+1
    print(cnt)
lst1 = [100,10,30,90,35, 65, 75, 80, 20, 40]
lstex(lst1)

"""
10.]  Write a Python program to create a list by concatenating a given list which range goes from 1 to n.
Sample list : ['p', 'q']
n =5
Sample Output : ['p1', 'q1', 'p2', 'q2', 'p3', 'q3', 'p4', 'q4', 'p5', 'q5']
"""

def conlst(lst,n):
    rlst=[]
    tmp=""
    for r in range(n-1):
        for le in lst:
            tmp=le+str(r+1)
            rlst.append(tmp)
    print(rlst)
lst1 = ['p','q']
conlst(lst1,8)
"""

11.] Write a Python program to re-arrange the elements, meaning push 2 elements further
Sample list: [0,1,2,3,4,5]
o/p : [4,5,0,1,2,3]

"""
def conlst(lst,n):
    lst=lst[-n:]+lst[:-n]
    print(lst)
lst1 = [0,1,2,3,4,5]
conlst(lst1,2)
"""
Method 2
"""
def conlst(lst):
    rlst=[str(le) for le in lst]
    lst=int("".join(rlst))
    print(lst)
lst1 = [11, 33, 50]
conlst(lst1)

"""
14.] WAP to convert given list into split into list of lists for every four elements.
counts of elements in the given list is always multiple of 4.
i.e number of elements in the input list will be always either 4 or 8 or 12 or 16 or 20... elements only
lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]

o/p = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]
"""

def conlst(lst,n):
    cnt=0
    result=[]
    for le in lst:
        rlst=[]
        for i in range(n):
            if len(lst)>i+cnt:
                rlst.append(lst[i+cnt])
                #print(lst[i+cnt])
                #print(rlst) 
        if rlst==[]:
            pass
        else:
            result.append(rlst)        
        cnt=cnt+n
    print(result)
lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
conlst(lst1,4)
conlst(lst1,5)
conlst(lst1,6)

"""
Output for above 
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16]]
[[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16]]
"""

"""
15.] WAP to sum elements in both the list based on the index.
No.of elements in both the list will be always the same.
lst1 = [1,2,3,4]
lst2 = [6,7,8,9]
o/p = [7,9,11,13]

"""
def conlst(glst1,glst2):
    cnt=0
    result=[]
    for i in range(len(glst1)):
        result.append(glst1[i]+glst2[i])
    print(result)
lst1 = [1,2,3,4]
lst2 = [6,7,8,9]
conlst(lst1,lst2)

"""
16.] WAP to find sum of elements in odd index and even indexes.
lst = [1,2,3,4,5,6,7,8,9]
even_sum = 20
odd_sum = 25
"""
def conlst(lst):
    sumeven=0
    sumodd=0
    for i in range(len(lst)):
        if i%2==0:
            sumodd=sumodd+lst[i]
        else:
            sumeven=sumeven+lst[i]
    print("Even Sum",sumeven)
    print("Odd Sum",sumodd)
lst1 = [1,2,3,4,5,6,7,8,9]
conlst(lst1)

"""
18.] Write a Python program to flatten a given nested list structure.
Original list: [[0], [10], [20, 30], [40], [50], [60, 70, 80], [90, 100, 110, 120]]
Flatten list:
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
"""

def conlst(lst):
    flatlst=[]
    for slst in lst:
        for le in slst:
            flatlst.append(le)
    print(flatlst)
lst1 = [[0], [10], [20, 30], [40], [50], [60, 70, 80], [90, 100, 110, 120]]
conlst(lst1)


"""
19.] WAP to add value 5 to all the values in a given dictionary
Input : {0: 10, 1: 20, 2: 30}
output : {0: 15, 1: 25, 2: 35}
"""

def conlst(dict):
    rdict={}
    rdict.update((x, y+5) for x, y in dict.items())
    print(rdict)
dict1 =  {0: 10, 1: 20, 2: 30}
conlst(dict1)

"""
20.]  Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x).
Sample Dictionary ( n = 5) :
Ex
epected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
"""
def conlst(n):
    dict={}
    dict.update((y+1, (y+1)*(y+1)) for y in range(n))
    print(dict)
conlst(5)

